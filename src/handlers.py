import os
import zipfile
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import TimedOut, BadRequest
from telegram.ext import CallbackContext, ConversationHandler

from database import DatabaseBooks, DatabaseSettings
from constants import FLIBUSTA_BASE_URL, DEFAULT_BOOK_FORMAT, BOT_NEWS, \
    SETTING_MAX_BOOKS, SETTING_LANG_SEARCH, SETTING_SORT_ORDER, SETTING_SIZE_LIMIT, \
    SETTING_BOOK_FORMAT, SETTING_SEARCH_TYPE, SETTING_OPTIONS, SETTING_TITLES
from utils import format_size, extract_cover_from_fb2, extract_metadata_from_fb2, format_metadata_message, \
    get_platform_recommendations, download_book_with_filename, upload_to_tmpfiles
from logger import logger


DB_BOOKS = DatabaseBooks()
DB_SETTINGS = DatabaseSettings()

BOOKS = 'BOOKS'
PAGES_OF_BOOKS = 'PAGES_OF_BOOKS'
FOUND_BOOKS_COUNT = 'FOUND_BOOKS_COUNT'
USER_PARAMS = 'USER_PARAMS'
SERIES = 'SERIES'
PAGES_OF_SERIES = 'PAGES_OF_SERIES'
FOUND_SERIES_COUNT = 'FOUND_SERIES_COUNT'

CONTACT_INFO = {'email': os.getenv("FEEDBACK_EMAIL", "–Ω–µ —É–∫–∞–∑–∞–Ω"), 'pikabu': os.getenv("FEEDBACK_PIKABU", ""),
                'pikabu_username': os.getenv("FEEDBACK_PIKABU_USERNAME", "–Ω–µ —É–∫–∞–∑–∞–Ω")}

SEARCH_CONTEXT = 'SEARCH_CONTEXT'
SEARCH_TYPE_BOOKS = 'books'
SEARCH_TYPE_SERIES = 'series'

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def create_back_button() -> list:
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]


def form_header_books(page, max_books, found_count, search_type='–∫–Ω–∏–≥', series_name=None):
    # return f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Å {max_books * page + 1} –ø–æ {min(max_books * (page + 1), found_count)} –∏–∑ {found_count} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö {search_type}:"
    start = max_books * page + 1
    end = min(max_books * (page + 1), found_count)

    header = f"–ü–æ–∫–∞–∑—ã–≤–∞—é —Å {start} –ø–æ {end} –∏–∑ {found_count} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö {search_type}"

    if series_name:
        header += f" –≤ —Å–µ—Ä–∏–∏ '{series_name}'"

    return header


def create_books_keyboard(page, pages_of_books, search_context=SEARCH_TYPE_BOOKS):
    # reply_markup = None
    keyboard = []

    if pages_of_books:
        books_in_page = pages_of_books[page]

        if books_in_page:
            # keyboard = []
            for book in books_in_page:
                text = f"{book.Title} ({book.LastName} {book.FirstName}) {format_size(book.BookSize)}/{book.Genre}"
                if book.SearchYear != 0:
                    text += f"/{str(book.SearchYear)}"
                keyboard.append([InlineKeyboardButton(
                    text,
                    callback_data=f"send_file:{book.Folder}:{book.FileName}:{book.Ext}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            if page > 0:
                navigation_buttons.append(InlineKeyboardButton("‚¨Ü –í –Ω–∞—á–∞–ª–æ", callback_data=f"page_0"))
                navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
            if page < len(pages_of_books) - 1:
                navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
                navigation_buttons.append(InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü ‚¨áÔ∏èÔ∏èÔ∏è", callback_data=f"page_{len(pages_of_books) - 1}"))
            if navigation_buttons:
                keyboard.append(navigation_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏—è–º" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–µ—Ä–∏—è–º
            if search_context == SEARCH_TYPE_SERIES:
                keyboard.append([InlineKeyboardButton("‚§¥Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏—è–º", callback_data="back_to_series")])

            # reply_markup = InlineKeyboardMarkup(keyboard)

    # return reply_markup
    return keyboard


def create_series_keyboard(page, pages_of_series):
    # reply_markup = None
    keyboard = []

    if pages_of_series:
        series_in_page = pages_of_series[page]

        if series_in_page:
            # keyboard = []
            for idx, (series_name, search_series, book_count) in enumerate(series_in_page):
                text = f"{series_name} ({book_count})"
                keyboard.append([InlineKeyboardButton(
                    text,
                    callback_data=f"show_series:{page}:{idx}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_buttons = []
            if page > 0:
                navigation_buttons.append(InlineKeyboardButton("‚¨Ü –í –Ω–∞—á–∞–ª–æ", callback_data=f"series_page_0"))
                navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"series_page_{page - 1}"))
            if page < len(pages_of_series) - 1:
                navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"series_page_{page + 1}"))
                navigation_buttons.append(
                    InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü ‚¨áÔ∏èÔ∏èÔ∏è", callback_data=f"series_page_{len(pages_of_series) - 1}"))
            if navigation_buttons:
                keyboard.append(navigation_buttons)

            # reply_markup = InlineKeyboardMarkup(keyboard)

    return keyboard


async def edit_or_reply_message(query, text, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ"""
    if hasattr(query.message, 'message_id'):
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await query.message.reply_text(text, reply_markup=reply_markup)


async def process_book_download(query, book_id, book_format, file_name, file_ext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–Ω–∏–≥–∏"""
    processing_msg = await query.message.reply_text(
        "‚è∞ <i>–û–∂–∏–¥–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–∏–≥—É...</i>",
        parse_mode=ParseMode.HTML,
        disable_notification=True
    )

    try:
        url = f"{FLIBUSTA_BASE_URL}/b/{book_id}/{book_format}"
        book_data, original_filename = await download_book_with_filename(url)
        public_filename = original_filename if original_filename else f"{book_id}.{book_format}"

        if book_data:
            if book_format == DEFAULT_BOOK_FORMAT:
                await extract_and_send_metadata(book_data, query)

            await query.message.reply_document(
                document=book_data,
                filename=public_filename,
                disable_notification=True
            )
        else:
            await query.message.reply_text(
                "üòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                disable_notification=True
            )

        await processing_msg.delete()
        return public_filename

    except TimedOut:
        await handle_timeout_error(processing_msg, book_data, file_name, file_ext, query)
    except Exception as e:
        #await handle_download_error(processing_msg, url, e, query)
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏"""
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–∏–≥–∏: {e}")
        await processing_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–Ω–∏–≥–∏ {url}. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ"
        )
        logger.log_user_action(query.from_user.id, "error sending book direct", url)

    return None


async def extract_and_send_metadata(book_data, query):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏"""
    with zipfile.ZipFile(BytesIO(book_data), 'r') as zip_file:
        for file_info in zip_file.infolist():
            file_data = zip_file.read(file_info.filename)
            file_io = BytesIO(file_data)
            file_io.seek(0)

            cover_bytes = extract_cover_from_fb2(file_io)
            metadata = extract_metadata_from_fb2(file_io)
            caption = format_metadata_message(metadata)

            if cover_bytes:
                await query.message.reply_photo(
                    photo=cover_bytes,
                    caption=caption or "",
                    disable_notification=True
                )
            elif caption:
                await query.message.reply_text(caption, disable_notification=True)


async def handle_timeout_error(processing_msg, book_data, file_name, file_ext, query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞"""
    await processing_msg.edit_text(
        "‚è≥ –ö–Ω–∏–≥–∞ –±–æ–ª—å—à–∞—è, –∏—Å–ø–æ–ª—å–∑—É—é –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å...",
        parse_mode=ParseMode.HTML
    )

    try:
        download_url = await upload_to_tmpfiles(book_data, f"{file_name}{file_ext}")
        if download_url:
            direct_download_url = download_url.replace(
                "https://tmpfiles.org/",
                "https://tmpfiles.org/dl/",
                1
            )
            message = (
                f"<a href='{direct_download_url}'>üì• –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É</a>\n"
                "‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç"
            )
            await query.message.reply_text(
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
                disable_notification=True
            )
    except Exception as upload_error:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ tmpfiles: {upload_error}")
        await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.log_user_action(query.from_user.id, "error sending book cloud", f"{file_name}{file_ext}")


# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

async def start_cmd(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å deep linking"""
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_params = DB_SETTINGS.get_user_settings(user.id)
    context.user_data[USER_PARAMS] = user_params

    #–í—ã–≤–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–º–æ—â–∏ –ø–æ –ø–æ–∏—Å–∫—É –∫–Ω–∏–≥
    welcome_text = """
üìö <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏—Å–∫–∞—Ç—å –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –§–ª–∏–±—É—Å—Ç–∞.</b> 

<u>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</u>
<code>/news</code> - –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
<code>/about</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ 
<code>/help</code> - –ø–æ–º–æ—â—å –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
<code>/genres</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã
<code>/langs</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –∫–Ω–∏–≥ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
<code>/set</code> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ –∫–Ω–∏–≥
<code>/donate</code> - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    await update.message.reply_text(welcome_text, parse_mode='HTML')

    user = update.message.from_user
    user_params = DB_SETTINGS.get_user_settings(user.id)
    context.user_data[USER_PARAMS] = user_params

    logger.log_user_action(user, "started bot")


async def genres_cmd(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∂–∞–Ω—Ä—ã"""
    results = DB_BOOKS.get_parent_genres()
    keyboard = [[InlineKeyboardButton(genre[0], callback_data=f"show_genres:{genre[0]}")] for genre in results]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∂–∞–Ω—Ä—ã:", reply_markup=reply_markup)

    user = update.message.from_user
    logger.log_user_action(user, "viewed parent genres")


async def langs_cmd(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏"""
    results = DB_BOOKS.get_langs()
    langs = ", ".join([f"<code>{lang[0].strip()}</code>" for lang in results])
    await update.message.reply_text(
        langs,
        parse_mode=ParseMode.HTML,
        disable_notification=True
    )

    user = update.message.from_user
    logger.log_user_action(user, "viewed langs of books")


def create_settings_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = [
        ("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞", SETTING_MAX_BOOKS),
        ("–Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥", SETTING_LANG_SEARCH),
        ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤—ã–¥–∞—á–∏", SETTING_SORT_ORDER),
        ("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä –∫–Ω–∏–≥", SETTING_SIZE_LIMIT),
        ("–§–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥", SETTING_BOOK_FORMAT),
        ("–¢–∏–ø –ø–æ–∏—Å–∫–∞ (–∫–Ω–∏–≥–∏/—Å–µ—Ä–∏–∏)", SETTING_SEARCH_TYPE),
    ]

    keyboard = [[InlineKeyboardButton(text, callback_data=f"set_{key}")] for text, key in settings]
    return InlineKeyboardMarkup(keyboard)


async def show_settings_menu(update_or_query, context, from_callback=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    reply_markup = create_settings_menu()

    if from_callback:
        await update_or_query.edit_message_text("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup=reply_markup)
        user = update_or_query.from_user
    else:
        await update_or_query.message.reply_text("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å:", reply_markup=reply_markup)
        user = update_or_query.message.from_user

    logger.log_user_action(user, "showed settings menu")


async def handle_back_to_series(query, context, action, params):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–∏–π"""
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
        page_num = context.user_data.get('last_series_page', 0)

        pages_of_series = context.user_data.get(PAGES_OF_SERIES)
        if not pages_of_series:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            return

        keyboard = create_series_keyboard(page_num, pages_of_series)
        reply_markup = InlineKeyboardMarkup(keyboard)

        if reply_markup:
            found_series_count = context.user_data.get(FOUND_SERIES_COUNT)
            user_params = context.user_data.get(USER_PARAMS)
            header_found_text = form_header_books(page_num, user_params.MaxBooks, found_series_count, '—Å–µ—Ä–∏–π')
            await query.edit_message_text(header_found_text, reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–µ—Ä–∏—è–º: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞")


async def handle_back_to_settings(query, context, action, params):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await show_settings_menu(query, context, from_callback=True)


async def settings_cmd(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await show_settings_menu(update, context, from_callback=False)



async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∏–ª–∏ —Å–µ—Ä–∏–π)"""
    search_type = context.user_data.get(SETTING_SEARCH_TYPE, 'books')

    if search_type == 'series':
        await handle_search_series(update, context)
    else:
        await handle_search_books(update, context)


async def handle_search_books(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫ –∫–Ω–∏–≥)"""
    query = update.message.text
    user = update.message.from_user

    processing_msg = await update.message.reply_text(
        "‚è∞ <i>–ò—â—É –∫–Ω–∏–≥–∏, –æ–∂–∏–¥–∞–π—Ç–µ...</i>",
        parse_mode=ParseMode.HTML,
        disable_notification=True
    )

    size_limit = context.user_data.get(SETTING_SIZE_LIMIT)
    user_params = DB_SETTINGS.get_user_settings(user.id)
    context.user_data[USER_PARAMS] = user_params
    context.user_data[SEARCH_CONTEXT] = SEARCH_TYPE_BOOKS  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    books, found_books_count = DB_BOOKS.search_books(
        query, user_params.MaxBooks, user_params.Lang,
        user_params.DateSortOrder, size_limit
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –∫–Ω–∏–≥–∏
    if books or found_books_count > 0:
        pages_of_books = [books[i:i + user_params.MaxBooks] for i in range(0, len(books), user_params.MaxBooks)]

        await processing_msg.delete()

        page = 0
        keyboard = create_books_keyboard(page, pages_of_books)
        reply_markup = InlineKeyboardMarkup(keyboard)
        if reply_markup:
            header_found_text = form_header_books(page, user_params.MaxBooks, found_books_count)
            await update.message.reply_text(header_found_text, reply_markup=reply_markup)

        context.user_data[BOOKS] = books
        context.user_data[PAGES_OF_BOOKS] = pages_of_books
        context.user_data[FOUND_BOOKS_COUNT] = found_books_count
    else:
        await update.message.reply_text("üòû –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞")

    logger.log_user_action(user, "searched for books", f"{query}; count:{found_books_count}")


async def handle_search_series(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∏—Å–∫ –∫–Ω–∏–≥)"""
    query_text = update.message.text
    user = update.message.from_user

    processing_msg = await update.message.reply_text(
        "‚è∞ <i>–ò—â—É –∫–Ω–∏–∂–Ω—ã–µ —Å–µ—Ä–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ...</i>",
        parse_mode=ParseMode.HTML,
        disable_notification=True
    )

    size_limit = context.user_data.get(SETTING_SIZE_LIMIT)
    user_params = DB_SETTINGS.get_user_settings(user.id)
    context.user_data[USER_PARAMS] = user_params
    context.user_data[SEARCH_CONTEXT] = SEARCH_TYPE_SERIES  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    # –ò—â–µ–º —Å–µ—Ä–∏–∏
    series, found_series_count = DB_BOOKS.search_series(
        query_text, user_params.MaxBooks, user_params.Lang, size_limit
    )

    if series or found_series_count > 0:
        pages_of_series = [series[i:i + user_params.MaxBooks] for i in range(0, len(series), user_params.MaxBooks)]

        await processing_msg.delete()

        page = 0
        keyboard = create_series_keyboard(page, pages_of_series)
        reply_markup = InlineKeyboardMarkup(keyboard)

        if reply_markup:
            header_found_text = form_header_books(page, user_params.MaxBooks, found_series_count, '—Å–µ—Ä–∏–π')
            await update.message.reply_text(header_found_text, reply_markup=reply_markup)

        context.user_data[SERIES] = series
        context.user_data[PAGES_OF_SERIES] = pages_of_series
        context.user_data[FOUND_SERIES_COUNT] = found_series_count
        context.user_data['series_search_query'] = query_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        context.user_data['last_series_page'] = page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    else:
        await update.message.reply_text("üòû –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–∂–Ω—ã—Ö —Å–µ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞")

    logger.log_user_action(user, "searched for series", f"{query_text}; count:{found_series_count}")


async def handle_search_series_books(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–∏–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏"""
    try:
        page_num = int(params[0])
        series_idx = int(params[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        pages_of_series = context.user_data.get(PAGES_OF_SERIES)
        if not pages_of_series or page_num >= len(pages_of_series) or series_idx >= len(pages_of_series[page_num]):
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏—é")
            return

        series_name, search_series_name, book_count = pages_of_series[page_num][series_idx]
        context.user_data['current_series_name'] = series_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏

        user = query.from_user
        user_params = DB_SETTINGS.get_user_settings(user.id)
        size_limit = context.user_data.get(SETTING_SIZE_LIMIT)

        # –ò—â–µ–º –∫–Ω–∏–≥–∏ —Å–µ—Ä–∏–∏ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        query_text = f"{context.user_data['series_search_query']}, —Å–µ—Ä–∏—è: '{search_series_name}'"
        #query_text = f"—Å–µ—Ä–∏—è: '{search_series_name}'"

        # #debug
        # print(query_text)

        books, found_books_count = DB_BOOKS.search_books(
            query_text, user_params.MaxBooks, user_params.Lang,
            user_params.DateSortOrder, size_limit
        )

        if books:
            pages_of_books = [books[i:i + user_params.MaxBooks] for i in range(0, len(books), user_params.MaxBooks)]
            context.user_data[BOOKS] = books
            context.user_data[PAGES_OF_BOOKS] = pages_of_books
            context.user_data[FOUND_BOOKS_COUNT] = found_books_count

            page = 0
            keyboard = create_books_keyboard(page, pages_of_books, SEARCH_TYPE_SERIES)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–µ—Ä–∏—è–º
            if keyboard:
                # keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏—è–º", callback_data="back_to_series")])
                reply_markup = InlineKeyboardMarkup(keyboard)

                # header_text = f"–ö–Ω–∏–≥–∏ —Å–µ—Ä–∏–∏ '{series_name}' ({book_count}):"
                header_text = form_header_books(page, user_params.MaxBooks, found_books_count, '–∫–Ω–∏–≥', series_name)
                await query.edit_message_text(header_text, reply_markup=reply_markup)
        else:
            await query.edit_message_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –≤ —Å–µ—Ä–∏–∏ '{series_name}'")

    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–∏–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–∏–∏")


# ===== –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö =====

def create_settings_keyboard(setting_type, current_value, options):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    :param setting_type: —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è callback_data)
    :param current_value: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    :param options: —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(value, display_text), ...]
    """
    keyboard = []

    if setting_type == SETTING_LANG_SEARCH:
        # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è —è–∑—ã–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
        if current_value:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úî {current_value} - —Å–±—Ä–æ—Å–∏—Ç—å",
                    callback_data=f"set_{setting_type}_to_"
                )
            ])

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤
        buttons = []
        for value, display_text in options:
            buttons.append(InlineKeyboardButton(
                f"{display_text}",
                callback_data=f"set_{setting_type}_to_{value}"
            ))

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 8 –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
        keyboard.extend([buttons[i:i + 8] for i in range(0, len(buttons), 8)])

    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        row = []
        for value, display_text in options:
            row.append(InlineKeyboardButton(
                f"{'‚úîÔ∏è ' if str(value) == str(current_value) else ''}{display_text}",
                callback_data=f"set_{setting_type}_to_{value}"
            ))
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard += create_back_button()

    return InlineKeyboardMarkup(keyboard)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK =====

async def button_callback(update: Update, context: CallbackContext):
    """–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user = query.from_user
    user_params = DB_SETTINGS.get_user_settings(user.id)
    context.user_data[USER_PARAMS] = user_params

    await query.answer()

    data = query.data.split(':')
    action, *params = data

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ê–î–ú–ò–ù–°–ö–ò–ï –¥–µ–π—Å—Ç–≤–∏—è
    if action in ['users_list', 'user_detail', 'toggle_block', 'recent_searches',
                 'recent_downloads', 'top_downloads', 'top_searches', 'back_to_stats',
                 'refresh_stats']:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        from admin import handle_admin_callback
        await handle_admin_callback(update, context)
        return

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¥–µ–π—Å—Ç–≤–∏—è
    action_handlers = {
        'send_file': handle_send_file,
        'show_genres': handle_show_genres,
        'back_to_settings': handle_back_to_settings,
        f'set_{SETTING_MAX_BOOKS}': handle_set_max_books,
        f'set_{SETTING_LANG_SEARCH}': handle_set_lang_search,
        f'set_{SETTING_SORT_ORDER}': handle_set_sort_order,
        f'set_{SETTING_SIZE_LIMIT}': handle_set_size_limit,
        f'set_{SETTING_BOOK_FORMAT}': handle_set_book_format,
        f'set_{SETTING_SEARCH_TYPE}': handle_set_search_type,
        'show_series': handle_search_series_books,
        'back_to_series': handle_back_to_series,
    }

    # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if action in action_handlers:
        handler = action_handlers[action]
        await handler(query, context, action, params)
        return

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    if action.startswith('page_'):
        await handle_page_change(query, context, action, params)
        return

    if action.startswith('series_page_'):
        await handle_series_page_change(query, context, action, params)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ set_ –¥–µ–π—Å—Ç–≤–∏–π
    if action.startswith('set_'):
        await handle_set_actions(query, context, action, params)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    print(f"Unknown action: {action}")
    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def handle_send_file(query, context, action, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞"""
    file_path, file_name, file_ext = params
    book_id = file_name
    user_params = context.user_data.get(USER_PARAMS)
    book_format = user_params.BookFormat or DEFAULT_BOOK_FORMAT

    public_filename = await process_book_download(query, book_id, book_format, file_name, file_ext)

    log_detail = f"{file_name}{file_ext}"
    log_detail += ":" + public_filename if public_filename else ""
    logger.log_user_action(query.from_user, "send file", log_detail)


async def handle_show_genres(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∂–∞–Ω—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    parent_genre = params[0]
    genres = DB_BOOKS.get_genres(parent_genre)

    if genres:
        genres_html = f"<b><code>{parent_genre}</code></b>\n\n"
        for genre in genres:
            genres_html += f"<code>{genre}</code>\n"
        await query.message.reply_text(genres_html, parse_mode=ParseMode.HTML)
    else:
        await query.message.reply_text("‚ùå –ñ–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", parse_mode=ParseMode.HTML)

    logger.log_user_action(query.from_user, "show genre", parent_genre)


# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö =====

async def handle_set_max_books(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    user_params = DB_SETTINGS.get_user_settings(query.from_user.id)
    current_value = user_params.MaxBooks

    options = SETTING_OPTIONS[SETTING_MAX_BOOKS]
    reply_markup = create_settings_keyboard(SETTING_MAX_BOOKS, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_MAX_BOOKS], reply_markup)
    logger.log_user_action(query.from_user, "showed max books setting for user")


async def handle_set_lang_search(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –ø–æ–∏—Å–∫–∞"""
    user_params = DB_SETTINGS.get_user_settings(query.from_user.id)
    current_value = user_params.Lang

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ –ë–î –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    langs = DB_BOOKS.get_langs()
    options = [(lang[0], lang[0]) for lang in langs if lang[0]]

    reply_markup = create_settings_keyboard(SETTING_LANG_SEARCH, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_LANG_SEARCH], reply_markup)
    logger.log_user_action(query.from_user, "showed langs of books setting for user")


async def handle_set_sort_order(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    user_params = DB_SETTINGS.get_user_settings(query.from_user.id)
    current_value = user_params.DateSortOrder

    options = SETTING_OPTIONS[SETTING_SORT_ORDER]
    reply_markup = create_settings_keyboard(SETTING_SORT_ORDER, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_SORT_ORDER], reply_markup)
    logger.log_user_action(query.from_user, "showed sort order setting for user")


async def handle_set_size_limit(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    current_value = context.user_data.get('size_limit', '')

    options = SETTING_OPTIONS[SETTING_SIZE_LIMIT]
    reply_markup = create_settings_keyboard(SETTING_SIZE_LIMIT, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_SIZE_LIMIT], reply_markup)
    logger.log_user_action(query.from_user, "showed size limit setting for user")


async def handle_set_book_format(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–∏–≥"""
    user_params = DB_SETTINGS.get_user_settings(query.from_user.id)
    current_value = user_params.BookFormat

    options = SETTING_OPTIONS[SETTING_BOOK_FORMAT]
    reply_markup = create_settings_keyboard(SETTING_BOOK_FORMAT, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_BOOK_FORMAT], reply_markup)
    logger.log_user_action(query.from_user, "showed book format setting for user")


async def handle_set_search_type(query, context, action, params):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
    current_value = context.user_data.get(SETTING_SEARCH_TYPE, 'books')

    options = SETTING_OPTIONS[SETTING_SEARCH_TYPE]
    reply_markup = create_settings_keyboard(SETTING_SEARCH_TYPE, current_value, options)

    await edit_or_reply_message(query, SETTING_TITLES[SETTING_SEARCH_TYPE], reply_markup)
    logger.log_user_action(query.from_user, "showed search type setting")


async def handle_page_change(query, context, action, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    page = int(action.removeprefix('page_'))
    pages_of_books = context.user_data.get(PAGES_OF_BOOKS)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
    search_context = context.user_data.get(SEARCH_CONTEXT, SEARCH_TYPE_BOOKS)
    keyboard = create_books_keyboard(page, pages_of_books, search_context)
    reply_markup = InlineKeyboardMarkup(keyboard)

    if reply_markup:
        found_books_count = context.user_data.get(FOUND_BOOKS_COUNT)
        user_params = context.user_data.get(USER_PARAMS)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        series_name = None
        if search_context == SEARCH_TYPE_SERIES:
            series_name = context.user_data.get('current_series_name', None)
        header_text = form_header_books(page, user_params.MaxBooks, found_books_count, '–∫–Ω–∏–≥', series_name)
        await query.edit_message_text(header_text, reply_markup=reply_markup)

    logger.log_user_action(query.from_user, "changed page of books", page)


async def handle_series_page_change(query, context, action, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    page = int(action.removeprefix('series_page_'))
    pages_of_series = context.user_data.get(PAGES_OF_SERIES)
    keyboard = create_series_keyboard(page, pages_of_series)
    reply_markup = InlineKeyboardMarkup(keyboard)

    if reply_markup:
        found_series_count = context.user_data.get(FOUND_SERIES_COUNT)
        user_params = context.user_data.get(USER_PARAMS)
        header_found_text = form_header_books(page, user_params.MaxBooks, found_series_count)
        await query.edit_message_text(header_found_text, reply_markup=reply_markup)

    context.user_data['last_series_page'] = page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

    logger.log_user_action(query.from_user, "changed page of series", page)


# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö SET_ACTIONS =====

async def handle_set_actions(query, context, action, params):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ set_ –¥–µ–π—Å—Ç–≤–∏—è"""
    user = query.from_user

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ action
    if action.startswith(f'set_{SETTING_MAX_BOOKS}_to_'):
        setting_type = SETTING_MAX_BOOKS
        new_value = int(action.removeprefix(f'set_{SETTING_MAX_BOOKS}_to_'))
        DB_SETTINGS.update_user_settings(user.id, maxbooks=new_value)

    elif action.startswith(f'set_{SETTING_LANG_SEARCH}_to_'):
        setting_type = SETTING_LANG_SEARCH
        new_value = action.removeprefix(f'set_{SETTING_LANG_SEARCH}_to_')
        DB_SETTINGS.update_user_settings(user.id, lang=new_value)

    elif action.startswith(f'set_{SETTING_SORT_ORDER}_to_'):
        setting_type = SETTING_SORT_ORDER
        new_value = action.removeprefix(f'set_{SETTING_SORT_ORDER}_to_')
        DB_SETTINGS.update_user_settings(user.id, datesortorder=new_value)

    elif action.startswith(f'set_{SETTING_SIZE_LIMIT}_to_'):
        setting_type = SETTING_SIZE_LIMIT
        new_value = action.removeprefix(f'set_{SETTING_SIZE_LIMIT}_to_')
        context.user_data[SETTING_SIZE_LIMIT] = new_value

    elif action.startswith(f'set_{SETTING_BOOK_FORMAT}_to_'):
        setting_type = SETTING_BOOK_FORMAT
        new_value = action.removeprefix(f'set_{SETTING_BOOK_FORMAT}_to_')
        DB_SETTINGS.update_user_settings(user.id, BookFormat=new_value)

    elif action.startswith(f'set_{SETTING_SEARCH_TYPE}_to_'):
        setting_type = SETTING_SEARCH_TYPE
        new_value = action.removeprefix(f'set_{SETTING_SEARCH_TYPE}_to_')
        context.user_data[SETTING_SEARCH_TYPE] = new_value

    else:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if setting_type != SETTING_SEARCH_TYPE and setting_type != SETTING_SIZE_LIMIT:
        context.user_data[USER_PARAMS] = DB_SETTINGS.get_user_settings(user.id)

    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if setting_type == 'lang_search':
        langs = DB_BOOKS.get_langs()
        options = [(lang[0], lang[0]) for lang in langs if lang[0]]
    else:
        options = SETTING_OPTIONS[setting_type]

    reply_markup = create_settings_keyboard(setting_type, new_value, options)

    # Debug
    print(f"{setting_type} {new_value}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.edit_message_text(SETTING_TITLES[setting_type], reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            raise e
    # else: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ"

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    logger.log_user_action(user, f"set {setting_type} to {new_value}")


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ =====

async def donate_cmd(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /donate —Å HTML —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    addresses = {
        '‚Çø Bitcoin (BTC)': os.getenv('DONATE_BTC'),
        'Œû Ethereum & Poligon (ETH & POL)': os.getenv('DONATE_ETH'),
        '‚óé Solana (SOL & USDC)': os.getenv('DONATE_SOL'),
        'üîµ Sui (SUI)': os.getenv('DONATE_SUI'),
        '‚ÇÆ Toncoin (TON & USDT)': os.getenv('DONATE_TON'),
        'üî¥ Tron (TRX & USDT)': os.getenv('DONATE_TRX')
    }

    donate_html = "üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ-–∫–æ–ø–µ–µ—á–∫–æ–π</b>"
    for crypto_name, address in addresses.items():
        if address:
            donate_html += f"\n{crypto_name}:\n<code>{address}</code>\n"

    await update.message.reply_text(
        donate_html,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    user = update.message.from_user
    logger.log_user_action(user, "viewed donate page")


async def help_cmd(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = """
    <b>–ü–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥.</b>

    üìö <i>–ó–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –§–ò–û –∞–≤—Ç–æ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏, –µ—ë –∂–∞–Ω—Ä–∞, —Å–µ—Ä–∏–∏ –∏ —è–∑—ã–∫–∞. –í —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–º–≤–æ–ª % –¥–ª—è –ø–æ–¥–º–µ–Ω—ã –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤.</i> 
    <u>–û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫:</u>
    ‚úèÔ∏è <code>–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π –í–æ–π–Ω–∞ –∏ –º–∏—Ä</code>
    ‚úèÔ∏è <code>—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –∑–≤—ë–∑–¥—ã</code>
    ‚úèÔ∏è <code>harry potter fr</code>
    ‚úèÔ∏è <code>–º–∞—Ç–µ–º–∞—Ç–∏—á%</code>

    <i>–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä—É, –∂–∞–Ω—Ä—É, —Å–µ—Ä–∏–∏, –≥–æ–¥—É –∏–∑–¥–∞–Ω–∏—è. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –º–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –í –æ–¥–Ω–æ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª |</i>
    <u>–ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:</u>
    üîé <code>–Ω–∞–∑–≤–∞–Ω–∏–µ: =–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è</code>
    üîé <code>–Ω–∞–∑–≤–∞–Ω–∏–µ: –º–æ–Ω–∞—Ö|–º–æ–Ω–∞—à|–º–æ–Ω–∞—Å—Ç—ã—Ä</code>
    üîé <code>–∞–≤—Ç–æ—Ä: –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π, –Ω–∞–∑–≤–∞–Ω–∏–µ: !–í–æ–π–Ω–∞, —è–∑—ã–∫: ru</code>
    üîé <code>–∞–≤—Ç–æ—Ä: –õ—É–∫—å—è–Ω–µ–Ω–∫–æ, –∂–∞–Ω—Ä: !—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞</code>
    üîé <code>—Å–µ—Ä–∏—è: –∂–∏–∑–Ω—å –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π, –≥–æ–¥: -1991</code>

    <u>–ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥—É:</u>
    üï∞ <code>–≥–æ–¥: 1950</code> - –∫–Ω–∏–≥–∏ 1950 –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è
    üï∞ <code>–≥–æ–¥: 1924-1953</code> - –∫–Ω–∏–≥–∏ —Å 1924 –ø–æ 1953 –≥–æ–¥—ã –∏–∑–¥–∞–Ω–∏—è
    üï∞ <code>–≥–æ–¥: -1991</code> - –∫–Ω–∏–≥–∏ –¥–æ 1991 –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    üï∞ <code>–≥–æ–¥: 1991-</code> - –∫–Ω–∏–≥–∏ 1991 –≥–æ–¥–∞ –∏–∑–¥–∞–Ω–∏—è –∏ –Ω–æ–≤–µ–µ

    <u>–ù–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:</u>
    üèôÔ∏è <code>–≥–æ—Ä–æ–¥: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫</code> - –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É –∏–∑–¥–∞–Ω–∏—è
    üè¢ <code>–∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: –ù–∞—É–∫–∞</code> - –ø–æ–∏—Å–∫ –ø–æ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
    
    <u>–£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤–∞:</u>
    üö¶ <code>!—Å–ª–æ–≤–æ</code> - –∏—Å–∫–ª—é—á–∏—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–†–∞—Å–ø—É—Ç–∏–Ω !–í–∞–ª–µ–Ω—Ç–∏–Ω</code> - –∏—â–µ–º —Å–ª–æ–≤–æ –†–∞—Å–ø—É—Ç–∏–Ω –∏ –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–æ –í–∞–ª–µ–Ω—Ç–∏–Ω
    üö¶ <code>=—Å–ª–æ–≤–æ</code> - —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–Ω–∞–∑–≤–∞–Ω–∏–µ: =–º–æ–Ω–∞—Ö</code>
    """
    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.log_user_action(update.message.from_user, "showed help")


async def about_cmd(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
    try:
        stats = DB_BOOKS.get_library_stats()
        last_update = stats['last_update']
        #last_update_str = last_update.strftime('%d.%m.%Y') if hasattr(last_update, 'strftime') else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        last_update_str = last_update

        #debug
        #print(f"{last_update}, {last_update_str}")

        reader_recommendations = get_platform_recommendations()

        about_text = f"""
<b>Flibusta Bot</b> - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å —Å–∞–π—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –§–ª–∏–±—É—Å—Ç–∞.

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –±–æ—Ç–∞:</b>
‚Ä¢ üìö –ö–Ω–∏–≥: <code>{stats['books_count']:,}</code>
‚Ä¢ üë• –ê–≤—Ç–æ—Ä–æ–≤: <code>{stats['authors_count']:,}</code>
‚Ä¢ üè∑Ô∏è –ñ–∞–Ω—Ä–æ–≤: <code>{stats['genres_count']:,}</code>
‚Ä¢ üìñ –°–µ—Ä–∏–π: <code>{stats['series_count']:,}</code>
‚Ä¢ üåê –Ø–∑—ã–∫–æ–≤: <code>{stats['languages_count']:,}</code>
‚Ä¢ üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: <code>{last_update_str}</code>
‚Ä¢ üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏: <code>{stats['max_filename']}</code>

‚ö° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>
‚Ä¢ üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–≤—Ç–æ—Ä—É, –∂–∞–Ω—Ä—É, —Å–µ—Ä–∏–∏, —è–∑—ã–∫—É –∏ –≥–æ–¥—É –∏–∑–¥–∞–Ω–∏—è
‚Ä¢ üìö –ü–æ–∏—Å–∫ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å–µ—Ä–∏—è–º 
‚Ä¢ üìñ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö fb2, epub, mobi
‚Ä¢ ‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
‚Ä¢ üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ fb2 —Ñ–æ—Ä–º–∞—Ç–∞)
{reader_recommendations}
üìû <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b>
‚Ä¢ üìß Email: <code>{CONTACT_INFO['email']}</code>
‚Ä¢ üéÆ –ü–∏–∫–∞–±—É: <a href="{CONTACT_INFO['pikabu']}">{CONTACT_INFO['pikabu_username']}</a>

üõ† <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Python 3.11
‚Ä¢ python-telegram-bot
‚Ä¢ SQLite
‚Ä¢ Flibusta database
        """

        await update.message.reply_text(
            about_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

        logger.log_user_action(update.message.from_user, "viewed about")

    except Exception as e:
        print(f"Error in about command: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ",
            parse_mode=ParseMode.HTML
        )


async def news_cmd(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /news - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    try:
        if not BOT_NEWS:
            await update.message.reply_text(
                "üì¢ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                parse_mode=ParseMode.HTML
            )
            return

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
        latest_news = BOT_NEWS[:3]

        news_text = "üì¢ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n\n"

        for i, news_item in enumerate(latest_news, 1):
            news_text += f"üìÖ <b>{news_item['date']}</b>\n"
            news_text += f"<b>{news_item['title']}</b>\n"
            news_text += f"{news_item['content']}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if i < len(latest_news):
                news_text += "‚îÄ" * 30 + "\n\n"

        await update.message.reply_text(
            news_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        user = update.message.from_user
        logger.log_user_action(user, "viewed news")

    except Exception as e:
        print(f"Error in news command: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏",
            parse_mode=ParseMode.HTML
        )


