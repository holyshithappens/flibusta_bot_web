#import configparser
from datetime import datetime
import os

from telegram import BotCommand, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, \
    ConversationHandler, CallbackContext
from telegram.request import HTTPXRequest
from telegram.error import Forbidden, BadRequest, TimedOut

from handlers import handle_message, button_callback, start_cmd, genres_cmd, langs_cmd, settings_cmd, donate_cmd, \
    help_cmd, about_cmd, news_cmd
from admin import admin_cmd, cancel_auth, auth_password, AUTH_PASSWORD, handle_admin_buttons, ADMIN_BUTTONS
from constants import FLIBUSTA_DB_BOOKS_PATH   # , FLIBUSTA_DB_SETTINGS_PATH
from health import log_system_stats

MONITORING_INTERVAL=1800
CLEANUP_INTERVAL=3600

async def log_stats(context: CallbackContext):
    """–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = log_system_stats()
    print(f"üìä Stats: {stats['memory_used']:.1f}MB memory")

# async def perform_cleanup(context: CallbackContext):
#     """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
#     try:
#         cleanup_memory()
#     except Exception as e:
#         print(f"Error in periodic cleanup: {e}")

async def cleanup_old_sessions(context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ —É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if hasattr(context, 'application') and hasattr(context.application, 'user_data'):
            app = context.application
            cleaned_count = 0

            for user_id, user_data in app.user_data.items():
                if isinstance(user_data, dict):
                    last_activity = user_data.get('last_activity')

                    # –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 1 —á–∞—Å–∞
                    if isinstance(last_activity, datetime) and (datetime.now() - last_activity).total_seconds() > CLEANUP_INTERVAL:
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –£–î–ê–õ–ï–ù–ò–ï–ú –∫–ª—é—á–µ–π
                        search_keys = [
                            'BOOKS', 'PAGES_OF_BOOKS', 'FOUND_BOOKS_COUNT',
                            'SERIES', 'PAGES_OF_SERIES', 'FOUND_SERIES_COUNT'
                        ]

                        for key in search_keys:
                            if key in user_data:
                                del user_data[key]

                        cleaned_count += 1

            if cleaned_count > 0:
                print(f"üßπ Cleaned datasets of {cleaned_count} user(s)")

    except Exception as e:
        print(f"‚ùå Cleanup error: {e}")


async def error_handler(update: Update, context: CallbackContext):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    if isinstance(error, Forbidden) and "bot was blocked by the user" in str(error):
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞: {update.effective_user.id if update.effective_user else 'Unknown'}")
        return

    # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query
    if isinstance(error, BadRequest) and "Query is too old" in str(error):
        print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query: {error}")
        return

    # –¢–∞–π–º–∞—É—Ç
    if isinstance(error, TimedOut):
        print(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {error}")
        return

    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
    print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}")
    if update and update.effective_user:
        print(f"User: {update.effective_user.id}")


def check_files():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∏ –ë–î
    required_paths = [
        FLIBUSTA_DB_BOOKS_PATH
#        FLIBUSTA_DB_SETTINGS_PATH
    ]
    for path in required_paths:
        if not os.path.exists(path):
            print(f"–û—à–∏–±–∫–∞: –ø—É—Ç—å {path} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.")
            return False
    return True


async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("news", "–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        BotCommand("about", "–ò–Ω—Ñ–∞ –æ –±–æ—Ç–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º"),
        BotCommand("genres", "–°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤"),
        BotCommand("langs", "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏"),
        BotCommand("set", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"),
        BotCommand("donate", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        #        BotCommand("search", "–ü–æ–∏—Å–∫ –∫–Ω–∏–≥"),
    ]
    await application.bot.set_my_commands(commands)


def main():
    if not check_files():
        raise RuntimeError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
#        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ INI-—Ñ–∞–π–ª–∞
#        config = configparser.ConfigParser()
#        config.read("config.ini")
#        TOKEN = config.get("Bot", "token", fallback=None)
#        if not TOKEN:
#            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.ini.")

    request = HTTPXRequest(connect_timeout=60, read_timeout=60)
    #application = Application.builder().token(TOKEN).read_timeout(60).build()
    application = Application.builder().token(TOKEN).request(request).build()

    application.add_error_handler(error_handler)

    # –í –ø–µ—Ä–≤–∫—é –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('admin', admin_cmd)],
        states={
            AUTH_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, auth_password)]
        },
        fallbacks=[CommandHandler('cancel', cancel_auth)]
    )
    application.add_handler(conv_handler)

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    ADMIN_BUTTONS_REGEX = r'^(' + '|'.join(ADMIN_BUTTONS.values()) + ')$'
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex(ADMIN_BUTTONS_REGEX), handle_admin_buttons))
    # # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    # application.add_handler(CallbackQueryHandler(handle_admin_callback))

    # application.add_handler(CommandHandler("whoami", admin_whoami))
    # application.add_handler(CommandHandler("stats", admin_user_stats))
    # application.add_handler(CommandHandler("broadcast", admin_broadcast))
    # application.add_handler(CommandHandler("logs", admin_logs))
    # application.add_handler(CommandHandler("logout", admin_logout))

    # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(CommandHandler("news", news_cmd))
    application.add_handler(CommandHandler("about", about_cmd))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("genres", genres_cmd))
    application.add_handler(CommandHandler("langs", langs_cmd))
    application.add_handler(CommandHandler("set", settings_cmd))
    application.add_handler(CommandHandler("donate", donate_cmd))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    application.post_init = set_commands

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å–µ—Å—Å–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    #job_queue = application.job_queue
    #job_queue.run_repeating(cleanup_admin_sessions, interval=300, first=10)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    job_queue = application.job_queue
    if job_queue:
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        job_queue.run_repeating(log_stats, interval=MONITORING_INTERVAL, first=10)
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
        job_queue.run_repeating(cleanup_old_sessions, interval=CLEANUP_INTERVAL, first=CLEANUP_INTERVAL)

    application.run_polling()

if __name__ == '__main__':
    main()