import datetime
import os
import time

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, ConversationHandler

from database import DatabaseSettings, DatabaseLogs

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
USERS_PER_PAGE = 10

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
DB_LOGS = DatabaseLogs()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏: –∫–ª—é—á - –∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
ADMIN_BUTTONS = {
    "admin_user_stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "admin_users": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "admin_broadcast": "üì¢ –†–∞—Å—Å—ã–ª–∫–∞",
    "admin_logs": "üìã –õ–æ–≥–∏",
    "admin_system": "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞",
    "admin_whoami": "üë§ –ö—Ç–æ —è",
    "admin_logout": "üö™ –í—ã—Ö–æ–¥",
    "admin_recent_activity": "üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
}

# –û–±—Ä–∞—Ç–Ω–æ–µ mapping: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ -> –∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
ADMIN_BUTTONS_REVERSE = {v: k for k, v in ADMIN_BUTTONS.items()}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
# Format: {user_id: {"admin_until": timestamp, "permissions": {...}}}
admin_sessions = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "")
ADMIN_SESSION_TIMEOUT = 1800  # 30 –º–∏–Ω—É—Ç

DB_SETTINGS = DatabaseSettings()


# ===== –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï =====

AUTH_PASSWORD = 1

def authenticate_admin(password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return password == ADMIN_PASSWORD and ADMIN_PASSWORD != ""


def grant_admin_access(user_id: int, duration: int = ADMIN_SESSION_TIMEOUT):
    """–î–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    admin_until = int(time.time()) + duration
    admin_sessions[user_id] = {
        "admin_until": admin_until,
        "permissions": {
            "view_stats": True,
            "broadcast": True,
            "manage_users": True,
            "view_logs": True
        }
    }


def revoke_admin_access(user_id: int):
    """–ó–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_sessions.pop(user_id, None)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    cleanup_expired_sessions()

    session = admin_sessions.get(user_id)
    if session and session["admin_until"] > time.time():
        return True
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    if session:
        revoke_admin_access(user_id)
    return False


def cleanup_expired_sessions():
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏"""
    current_time = time.time()
    expired_users = [
        user_id for user_id, session in admin_sessions.items()
        if session["admin_until"] <= current_time
    ]
    for user_id in expired_users:
        revoke_admin_access(user_id)
    return len(expired_users)


async def cleanup_admin_sessions(context: CallbackContext):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
    cleaned = cleanup_expired_sessions()
    if cleaned > 0:
        print(f"–û—á–∏—â–µ–Ω–æ {cleaned} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")


async def cancel_auth(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END


async def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    ADMIN_KEYBOARD = [
        [ADMIN_BUTTONS["admin_user_stats"], ADMIN_BUTTONS["admin_recent_activity"]],
        [ADMIN_BUTTONS["admin_users"], ADMIN_BUTTONS["admin_logs"]],
        [ADMIN_BUTTONS["admin_broadcast"], ADMIN_BUTTONS["admin_system"]],
        [ADMIN_BUTTONS["admin_whoami"], ADMIN_BUTTONS["admin_logout"]]
    ]

    reply_markup = ReplyKeyboardMarkup(ADMIN_KEYBOARD, resize_keyboard=True)

    await update.message.reply_text(
        "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup
    )


async def handle_admin_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user = update.effective_user

    if not is_admin(user.id):
        await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∏",
                                        #parse_mode=ParseMode.HTML,
                                        reply_markup=ReplyKeyboardRemove()
        )
        revoke_admin_access(user.id)
        return

    text = update.message.text
    handler_name = ADMIN_BUTTONS_REVERSE.get(text)

    if handler_name:
        handler = globals().get(handler_name)
        if handler and callable(handler):
            await handler(update, context)
        else:
            await update.message.reply_text(
                f"‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ {handler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode=ParseMode.HTML
            )
    else:
        await show_admin_panel(update, context)


async def admin_cmd(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user

    if is_admin(user.id):
        await show_admin_panel(update, context)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    await update.message.reply_text(
        "üîê <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>",
        parse_mode=ParseMode.HTML
    )
    return AUTH_PASSWORD


async def auth_password(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    user = update.effective_user
    password = update.message.text

    if authenticate_admin(password):
        grant_admin_access(user.id)
        await update.message.reply_text(
            "‚úÖ <b>–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>\n"
            f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã –¥–æ {time.strftime('%H:%M:%S', time.localtime(admin_sessions[user.id]['admin_until']))}",
            parse_mode=ParseMode.HTML
        )
        await show_admin_panel(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            parse_mode=ParseMode.HTML
        )
        return AUTH_PASSWORD


async def admin_whoami(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    user = update.effective_user
    session = admin_sessions.get(user.id)

    if session and session["admin_until"] > time.time():
        expires = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(session["admin_until"]))
        await update.message.reply_text(
            f"üëë <b>–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n"
            f"‚Ä¢ ID: {user.id}\n"
            f"‚Ä¢ –ò–º—è: {user.first_name}\n"
            f"‚Ä¢ –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {expires}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {session['admin_until'] - time.time():.0f} —Å–µ–∫—É–Ω–¥",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "‚ùå <b>–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤—Ö–æ–¥–∞",
            parse_mode=ParseMode.HTML
        )


# async def admin_stats(update: Update, context: CallbackContext):
#     """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
#     if not is_admin(update.effective_user.id):
#         await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
#         return
#
#     # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
#     cleaned = cleanup_expired_sessions()
#     if cleaned > 0:
#         print(f"–û—á–∏—â–µ–Ω–æ {cleaned} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")
#
#     stats = DB_SETTINGS.get_user_stats()
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏—è—Ö
#     active_admins = len([uid for uid in admin_sessions if admin_sessions[uid]["admin_until"] > time.time()])
#
#     stats_text = f"""
# üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>
#
# üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
# ‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
# ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {stats['blocked_users']}
# ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {stats['active_users']}
# ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã: {active_admins}
#
# üïí <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏:</b>
# """
#
#     for user_id, session in admin_sessions.items():
#         if session["admin_until"] > time.time():
#             expires = time.strftime('%H:%M:%S', time.localtime(session["admin_until"]))
#             stats_text += f"‚Ä¢ ID {user_id}: –¥–æ {expires}\n"
#
#     await update.message.reply_text(stats_text, parse_mode=ParseMode.HTML)


async def admin_broadcast(update: Update, context: CallbackContext):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    if not is_admin(update.effective_user.id):
        return

    if context.args:
        message = " ".join(context.args)
        # ... –∫–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏ ...
    else:
        await update.message.reply_text(
            "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            parse_mode=ParseMode.HTML
        )


async def admin_logs(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
    if not is_admin(update.effective_user.id):
        return

    # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
    await update.message.reply_text(
        "üìã <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode=ParseMode.HTML
    )


async def admin_logout(update: Update, context: CallbackContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    revoke_admin_access(update.effective_user.id)
    await update.message.reply_text(
        "üö™ <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )


async def admin_users(update: Update, context: CallbackContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(update.effective_user.id):
        return

    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await update.message.reply_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode=ParseMode.HTML
    )


async def admin_system(update: Update, context: CallbackContext):
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not is_admin(update.effective_user.id):
        return

    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    await update.message.reply_text(
        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode=ParseMode.HTML
    )


async def admin_user_stats(update: Update, context: CallbackContext, from_callback=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if from_callback:
        query = update.callback_query
        user = query.from_user
        message_func = query.edit_message_text
    else:
        user = update.effective_user
        message_func = update.message.reply_text

    if not is_admin(user.id):
        if from_callback:
            await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        else:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = DB_LOGS.get_user_stats_summary()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
    daily_stats = DB_LOGS.get_daily_user_stats(7)

    stats_text = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üë• <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']:,}</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['new_users_week']:,}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['active_users_week']:,}</code>

üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: <code>{stats['searches_week']:,}</code>
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π –∫–Ω–∏–≥: <code>{stats['downloads_week']:,}</code>

üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):</b>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    stats_text += "\n<pre>"
    stats_text += "–î–∞—Ç–∞       | –ù–æ–≤—ã–µ | –ê–∫—Ç–∏–≤–Ω—ã–µ | –ü–æ–∏—Å–∫–∏ | –°–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
    stats_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    for i in range(len(daily_stats['dates'])):
        date = daily_stats['dates'][i]
        new_users = daily_stats['new_users'][i]
        active_users = daily_stats['active_users'][i]
        searches = daily_stats['searches'][i]
        downloads = daily_stats['downloads'][i]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å.–º–µ—Å—è—Ü)
        date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')

        stats_text += f"{date_formatted:9} | {new_users:5} | {active_users:8} | {searches:6} | {downloads:9}\n"

    stats_text += "</pre>"

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –≤–∏–¥–µ emoji-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    stats_text += "\nüìä <b>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n"

    # –ì—Ä–∞—Ñ–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    max_new = max(daily_stats['new_users']) or 1
    stats_text += "üë• –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for count in daily_stats['new_users']:
        bar_length = int((count / max_new) * 10)
        stats_text += "üü¢" * bar_length + "‚ö™" * (10 - bar_length) + f" {count}\n"

    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    max_active = max(daily_stats['active_users']) or 1
    stats_text += "\nüî• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for count in daily_stats['active_users']:
        bar_length = int((count / max_active) * 10)
        stats_text += "üîµ" * bar_length + "‚ö™" * (10 - bar_length) + f" {count}\n"

    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∏—Å–∫–æ–≤
    max_searches = max(daily_stats['searches']) or 1
    stats_text += "\nüîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
    for count in daily_stats['searches']:
        bar_length = int((count / max_searches) * 10)
        stats_text += "üü°" * bar_length + "‚ö™" * (10 - bar_length) + f" {count}\n"

    # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    max_downloads = max(daily_stats['downloads']) or 1
    stats_text += "\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥:\n"
    for count in daily_stats['downloads']:
        bar_length = int((count / max_downloads) * 10)
        stats_text += "üü£" * bar_length + "‚ö™" * (10 - bar_length) + f" {count}\n"

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list:0")],
        [InlineKeyboardButton("üîç –¢–æ–ø –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="top_searches")],
        [InlineKeyboardButton("üì• –¢–æ–ø —Å–∫–∞—á–∏–≤–∞–Ω–∏–π", callback_data="top_downloads")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    await message_func(stats_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def show_top_searches(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    top_searches = DB_LOGS.get_top_searches(15)

    searches_text = "üîç <b>–¢–æ–ø –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"

    for i, search in enumerate(top_searches, 1):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        query_text = search['query'][:50] + "..." if len(search['query']) > 50 else search['query']

        searches_text += f"{i}. {query_text}\n"
        searches_text += f"   üë• {search['count']} —Ä–∞–∑ ({search['unique_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="back_to_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(searches_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def admin_recent_activity(update: Update, context: CallbackContext):
    """–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    activities = []
    recent_searches = DB_LOGS.get_recent_searches(10)
    recent_downloads = DB_LOGS.get_recent_downloads(10)

    activity_text = "üîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</b>\n\n"

    if recent_searches:
        activity_text += "üìö <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏:</b>\n"
        for search, timestamp, username in recent_searches:
            activity_text += f"‚Ä¢ {username}: {search} ({timestamp})\n"
        activity_text += "\n"

    if recent_downloads:
        activity_text += "üì• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n"
        for filename, timestamp, username in recent_downloads:
            activity_text += f"‚Ä¢ {username}: {filename} ({timestamp})\n"

    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list:0")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="back_to_stats")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(activity_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def show_users_list(query, context: CallbackContext, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = DB_LOGS.get_users_list(USERS_PER_PAGE, page * USERS_PER_PAGE)
    total_users = DB_LOGS.get_user_stats_summary()['total_users']

    users_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    users_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {((total_users - 1) // USERS_PER_PAGE) + 1}\n\n"

    keyboard = []

    for user in users:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–∫–∏
        user_info = f"{user['username']}"
        user_info += f" | üìÖ{user['first_seen'].split()[0]}"
        user_info += f" | üîç{user['total_searches']} | üì•{user['total_downloads']}"

        keyboard.append([InlineKeyboardButton(
            user_info,
            callback_data=f"user_detail:{user['user_id']}"
        )])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_list:{page - 1}"))
    if (page + 1) * USERS_PER_PAGE < total_users:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"users_list:{page + 1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="back_to_stats")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(users_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def show_user_detail(query, context: CallbackContext, user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ ID
    user = DB_LOGS.get_user_by_id(user_id)

    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
    activities = DB_LOGS.get_user_activity(user_id, 10)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    user_settings = DB_SETTINGS.get_user_settings(user_id)
    is_blocked = user_settings.IsBlocked

    user_text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    user_text += f"<b>–ò–º—è:</b> {user['username']}\n"
    user_text += f"<b>ID:</b> {user_id}\n"
    user_text += f"<b>–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç:</b> {user['first_seen']}\n"
    user_text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç:</b> {user['last_seen']}\n"
    user_text += f"<b>–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:</b> {user['total_searches']}\n"
    user_text += f"<b>–í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:</b> {user['total_downloads']}\n"
    user_text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if is_blocked else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"

    user_text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
    for activity in activities:
        action_desc = activity['action']
        if 'searched for' in activity['action']:
            # –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Å count –∏–∑ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∏—Å–∫–∞
            detail = activity['detail'].split(';')[0] if ';' in activity['detail'] else activity['detail']
            action_desc = f"üîç –ü–æ–∏—Å–∫: {detail}"
        elif 'send file' in activity['action']:
            action_desc = f"üì• –°–∫–∞—á–∞–ª: {activity['detail']}"
        elif 'started bot' in activity['action']:
            action_desc = "üöÄ –ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞"

        user_text += f"‚Ä¢ {activity['timestamp']}: {action_desc}\n"

    keyboard = [
        [InlineKeyboardButton(
            "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not is_blocked else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"toggle_block:{user_id}"
        )],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_list:0")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(user_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def toggle_user_block(query, context: CallbackContext, user_id):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    user_settings = DB_SETTINGS.get_user_settings(user_id)
    current_block_status = user_settings.IsBlocked
    new_block_status = not current_block_status

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == query.from_user.id and new_block_status:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user_id) and new_block_status:
        await query.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    DB_SETTINGS.update_user_settings(user_id, IsBlocked=new_block_status)

    action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_block_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_detail(query, context, user_id)


async def show_recent_searches(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    searches = DB_LOGS.get_recent_searches(20)

    searches_text = "üîç <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b>\n\n"

    for search, timestamp, username in searches:
        searches_text += f"<b>{username}</b> ({timestamp}):\n{search}\n\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(searches_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def show_recent_downloads(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    downloads = DB_LOGS.get_recent_downloads(20)

    downloads_text = "üì• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"

    for filename, timestamp, username in downloads:
        downloads_text += f"<b>{username}</b> ({timestamp}):\n{filename}\n\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(downloads_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def show_top_downloads(query, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥"""
    top_downloads = DB_LOGS.get_top_downloads(20)

    top_text = "üèÜ <b>–¢–æ–ø —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥</b>\n\n"

    for filename, count in top_downloads:
        top_text += f"<b>{count} —Ä–∞–∑</b>: {filename}\n"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(top_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def handle_admin_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    await query.answer()

    data = query.data.split(':')
    action = data[0]

    try:
        if action == "users_list":
            page = int(data[1]) if len(data) > 1 else 0
            await show_users_list(query, context, page)

        elif action == "user_detail":
            user_id = int(data[1])
            await show_user_detail(query, context, user_id)

        elif action == "toggle_block":
            user_id = int(data[1])
            await toggle_user_block(query, context, user_id)

        elif action == "recent_searches":
            await show_recent_searches(query, context)

        elif action == "recent_downloads":
            await show_recent_downloads(query, context)

        elif action == "top_downloads":
            await show_top_downloads(query, context)

        elif action == "top_searches":
            await show_top_searches(query, context)

        elif action == "back_to_stats":
            await admin_user_stats(update, context, from_callback=True)

        elif action == "refresh_stats":
            await admin_user_stats(update, context, from_callback=True)

    except Exception as e:
        print(f"Error in admin callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")