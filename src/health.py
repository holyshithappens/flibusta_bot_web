import psutil
import gc
import logging
from datetime import datetime

from telegram.ext import CallbackContext

from constants import CLEANUP_INTERVAL


def get_memory_usage():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
    process = psutil.Process()
    return process.memory_info().rss / 1024 / 1024


def get_system_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    return {
        'memory_used': get_memory_usage(),
        'memory_percent': psutil.virtual_memory().percent,
        'cpu_percent': psutil.cpu_percent(interval=1),
        'open_files': len(psutil.Process().open_files()),
        'threads': psutil.Process().num_threads(),
        'timestamp': datetime.now().isoformat()
    }


def log_system_stats():
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = get_system_stats()
    logging.info(f"SYSTEM_STATS: {stats}")
    return stats


def cleanup_memory():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    before = get_memory_usage()
    gc.collect()
    after = get_memory_usage()
    logging.info(f"Memory cleanup: {before:.1f}MB -> {after:.1f}MB")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–†–ò–ì–ì–ï–†–û–í –í job_queue =====

async def log_stats(context: CallbackContext):
    """–¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = log_system_stats()
    print(f"üìä Stats: {stats['memory_used']:.1f}MB memory")


# async def perform_cleanup(context: CallbackContext):
#     """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
#     try:
#         cleanup_memory()
#     except Exception as e:
#         print(f"Error in periodic cleanup: {e}")


async def cleanup_old_sessions(context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–∞ —É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        app = context.application
        cleaned_count_private = 0
        cleaned_count_group = 0

        # –ß–∏—Å—Ç–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º
        if hasattr(context.application, 'user_data'):
            for user_id, user_data in app.user_data.items():
                if isinstance(user_data, dict):
                    last_activity = user_data.get('last_activity')
                    # print(f"DEBUG: user_id:{user_id}, user_data:{str(user_data[0:1000])}, last_activity:{last_activity}")
                    # –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 1 —á–∞—Å–∞
                    if isinstance(last_activity, datetime) and (
                            datetime.now() - last_activity).total_seconds() > CLEANUP_INTERVAL:
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –£–î–ê–õ–ï–ù–ò–ï–ú –∫–ª—é—á–µ–π
                        search_keys = [
                            'BOOKS', 'PAGES_OF_BOOKS', 'FOUND_BOOKS_COUNT',
                            'SERIES', 'PAGES_OF_SERIES', 'FOUND_SERIES_COUNT',
                            'last_activity'
                        ]

                        for key in search_keys:
                            if key in user_data:
                                del user_data[key]

                        cleaned_count_private += 1

            if cleaned_count_private > 0:
                print(f"üßπ Cleaned datasets of {cleaned_count_private} user(s)")

        # –ß–∏—Å—Ç–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –±–æ—Ç–∞
        if hasattr(context.application, 'bot_data'):
            # print(f"DEBUG: –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Ç—Å–≤–æ bot_data: {str(app.bot_data)[0:1000]}")
            for group_id in list(app.bot_data.keys()):
                bot_data = app.bot_data[group_id]
                # print(f"DEBUG: group_id:{group_id}, bot_data:{str(bot_data)[0:1000]}")
                if isinstance(bot_data, dict):
                    last_activity = bot_data.get('last_activity')
                    # print(f"DEBUG: last_activity: {last_activity}")

                    # –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 1 —á–∞—Å–∞
                    if isinstance(last_activity, datetime) and (
                            datetime.now() - last_activity).total_seconds() > CLEANUP_INTERVAL:
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –£–î–ê–õ–ï–ù–ò–ï–ú –∫–ª—é—á–µ–π
                        del app.bot_data[group_id]
                        cleaned_count_group += 1

            if cleaned_count_group > 0:
                print(f"üßπ Cleaned datasets of {cleaned_count_group} group(s)")

        if cleaned_count_private > 0 or cleaned_count_group > 0:
            cleanup_memory()

    except Exception as e:
        print(f"‚ùå Cleanup error: {e}")